import React, { useState, useEffect } from 'react';
import NumKeys from './Components/NumKeys'
import { OpsKeys1, OpsKeys2, OpsKeys3 } from './Components/OperationKeys';
import Display from './Components/Display'
import './App.css';

function App() {

  // Using the useState hook to store an "Str" state variable that will be used to store the calculation
  // and a "Result" state variable that will be used to store the result of the calculation

  const [Str, setStr] = useState('')
  const [Result, setResult] = useState(0)

  // Using the useEffect hook to check if the result isn't an error, and storing only the valid result every time the app reloads

  useEffect(() => {
    var validCode = 1;
    try {
      eval(Str);
    } catch (e) {
      if (e instanceof SyntaxError) {
        validCode = 0;
      }
    } finally {
      if(validCode){
        setResult(eval(Str));
      }
    }
  }, [Str])

  let check = (e) => {

    // A switch statement that checks for the value of the pressed button and stores the correct value in the "Str" state variable

    switch(e.target.value){
      case'Ã—':
        setStr(Str + '*')
        break;
      case'DEL':
        setStr(Str.slice(0, -1))
        break;
      case'AC':
        setStr('')
        break;
      case'=':
        SwapStr()
        break;
      default:

        // A function that will limit the characters of the "Str" state variable to 20 characters at max

        let max = Str.length < 20 ? setStr(Str + e.target.value) : setStr(Str)

    }
  }

  // A function that sets the state of the "Str" state variable to the "Result" state variable value

  let SwapStr = () => {
    setStr(Result)
  }

  // The number keys are generated by a for loop looping through 9 numbers and generating the correct button with the correct value
  // The operation keys are generated separately, by looping through pre-made arrays using for loops and making new arrays used to store the correct buttons with the correct value and class

  return (
  <>
    <div className="background">
      <Display result={Result} str={Str}/>
      <div className="container">
        <NumKeys onClick={(e) => check(e)}/>
        <OpsKeys3 onClick={(e) => check(e)}/>
        <OpsKeys2 onClick={(e) => check(e)}/>
        <OpsKeys1 onClick={(e) => check(e)}/>
      </div>
    </div>
  </>
  )
}

export default App;